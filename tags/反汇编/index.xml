<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>反汇编 - Tag - Masimaro&#39;s blog</title>
        <link>http://HaiLateBoy.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/</link>
        <description>反汇编 - Tag - Masimaro&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>liu1793222129@163.com (Masimaro)</managingEditor>
            <webMaster>liu1793222129@163.com (Masimaro)</webMaster><lastBuildDate>Sun, 16 Sep 2018 10:36:23 &#43;0000</lastBuildDate><atom:link href="http://HaiLateBoy.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/" rel="self" type="application/rss+xml" /><item>
    <title>VC 在调用main函数之前的操作</title>
    <link>http://HaiLateBoy.github.io/posts/post-before-call-main/</link>
    <pubDate>Sun, 16 Sep 2018 10:36:23 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/post-before-call-main/</guid>
    <description><![CDATA[在C/C++语言中规定，程序是从main函数开始，也就是C/C++语言中以main函数作为程序的入口，但是操作系统是如何加载这个main函数]]></description>
</item>
<item>
    <title>C 堆内存管理</title>
    <link>http://HaiLateBoy.github.io/posts/heap-manage/</link>
    <pubDate>Sat, 01 Sep 2018 09:44:24 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/heap-manage/</guid>
    <description><![CDATA[在Win32 程序中每个进程都占有4GB的虚拟地址空间，这4G的地址空间内部又被分为代码段，全局变量段堆段和栈段，栈内存由函数使用，用来存储函]]></description>
</item>
<item>
    <title>C&#43;&#43; 继承分析</title>
    <link>http://HaiLateBoy.github.io/posts/cpp-inherit/</link>
    <pubDate>Sat, 14 Apr 2018 10:16:34 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/cpp-inherit/</guid>
    <description><![CDATA[面向对象的三大特性之一就是继承，继承运行我么重用基类中已经存在的内容，这样就简化了代码的编写工作。继承中有三种继承方式即:public protected pr]]></description>
</item>
<item>
    <title>C&#43;&#43;多态</title>
    <link>http://HaiLateBoy.github.io/posts/c-plus-polymorphism/</link>
    <pubDate>Mon, 12 Feb 2018 14:19:19 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-plus-polymorphism/</guid>
    <description><![CDATA[面向对象的程序设计的三大要素之一就是多态，多态是指基类的指针指向不同的派生类，其行为不同。多态的实现主要是通过虚函数和虚表来完成，虚表保存在]]></description>
</item>
<item>
    <title>C&#43;&#43;类的构造函数与析构函数</title>
    <link>http://HaiLateBoy.github.io/posts/c-plus-structure-and-destruct/</link>
    <pubDate>Tue, 06 Feb 2018 21:17:57 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-plus-structure-and-destruct/</guid>
    <description><![CDATA[C++中每个类都有其构造与析构函数，它们负责对象的创建和对象的清理和回收，即使我们不写这两个，编译器也会默认为我们提供这些构造函数。下面仍然]]></description>
</item>
<item>
    <title>结构体和类</title>
    <link>http://HaiLateBoy.github.io/posts/c-struct-and-class/</link>
    <pubDate>Sun, 28 Jan 2018 14:31:44 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-struct-and-class/</guid>
    <description><![CDATA[在C++中类与结构体并没有太大的区别，只是默认的成员访问权限不同，类默认权限为私有，而结构体为公有，所以在这将它们统一处理，在例子中采用类的]]></description>
</item>
<item>
    <title>c语言数组剖析</title>
    <link>http://HaiLateBoy.github.io/posts/c-array/</link>
    <pubDate>Thu, 25 Jan 2018 21:07:04 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-array/</guid>
    <description><![CDATA[C语言中数组是十分重要的一种结构，数组采用的是连续存储的方式，下面通过反汇编的方式来解析编译器对数组的操作。 数组作为局部变量 在任意一个函数当]]></description>
</item>
<item>
    <title>C语言中不同变量的访问方式</title>
    <link>http://HaiLateBoy.github.io/posts/c-access-variant/</link>
    <pubDate>Mon, 22 Jan 2018 22:44:24 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-access-variant/</guid>
    <description><![CDATA[C语言中的变量大致可以分为全局变量，局部变量，堆变量和静态局部变量，这些不同的变量存储在不同的位置，有不同的生命周期。一般程序将内存分为数据]]></description>
</item>
<item>
    <title>C函数原理</title>
    <link>http://HaiLateBoy.github.io/posts/c-function-principle/</link>
    <pubDate>Mon, 15 Jan 2018 22:57:02 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-function-principle/</guid>
    <description><![CDATA[C语言作为面向过程的语言，函数是其中最重要的部分，同时函数也是C种的一个难点，这篇文章希望通过汇编的方式说明函数的实现原理。 栈结构与相关的寄]]></description>
</item>
<item>
    <title>C语言循环的实现</title>
    <link>http://HaiLateBoy.github.io/posts/c-loop/</link>
    <pubDate>Fri, 12 Jan 2018 23:44:20 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/c-loop/</guid>
    <description><![CDATA[<p>在C语言中采用3中语法来实现循环，它们分别是while、for、do while，本文将分别说明这三种循环的实现，并对它们的运行效率进行比较。</p>]]></description>
</item>
</channel>
</rss>
