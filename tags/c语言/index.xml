<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C语言 - Tag - Masimaro&#39;s blog</title>
        <link>http://HaiLateBoy.github.io/tags/c%E8%AF%AD%E8%A8%80/</link>
        <description>C语言 - Tag - Masimaro&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>liu1793222129@163.com (Masimaro)</managingEditor>
            <webMaster>liu1793222129@163.com (Masimaro)</webMaster><lastBuildDate>Sat, 08 Apr 2023 10:34:28 &#43;0800</lastBuildDate><atom:link href="http://HaiLateBoy.github.io/tags/c%E8%AF%AD%E8%A8%80/" rel="self" type="application/rss+xml" /><item>
    <title>从0开始自制解释器——重构代码</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser07/</link>
    <pubDate>Sat, 08 Apr 2023 10:34:28 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser07/</guid>
    <description><![CDATA[在上一篇文章中，完成了对括号的支持，这样整个程序就可以解析普通的算术表达式了。但是在解析两个括号的过程中发现有大量的地方需要进行索引的回退操]]></description>
</item>
<item>
    <title>从0开始自制解释器——添加对括号的支持</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser06/</link>
    <pubDate>Fri, 24 Mar 2023 15:13:57 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser06/</guid>
    <description><![CDATA[在上一篇我们添加了对乘除法的支持，也介绍了BNF范式，并且针对当前的算术表达式写出了对应的范式，同时根据范式给出相应的代码实现。这篇我们将继]]></description>
</item>
<item>
    <title>从0开始自制解释器——添加对乘除法的支持</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser05/</link>
    <pubDate>Wed, 22 Mar 2023 15:00:51 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser05/</guid>
    <description><![CDATA[在上一篇中，我们实现了对减法的支持，并且介绍了语法图。针对简单的语法进行描述，用语法图描述当然是没问题的。但是针对一些复杂的语法进行描述，如]]></description>
</item>
<item>
    <title>从0开始自制解释器——实现多个整数的加减法</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser04/</link>
    <pubDate>Tue, 14 Mar 2023 16:42:34 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser04/</guid>
    <description><![CDATA[在上一篇我们实现了一个可以计算两个多位整数加减法的计算器。本章我们继续来给这个计算器添加功能，这次要给它添加可以连续计算多个整数相加减的功能]]></description>
</item>
<item>
    <title>从0开始自制解释器——实现多位整数的加减法计算器</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser03/</link>
    <pubDate>Wed, 08 Mar 2023 11:12:59 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser03/</guid>
    <description><![CDATA[上一篇我们实现了一个简单的加法计算器，并且了解了基本的词法分析、词法分析器的概念。本篇我们将要对之前实现的加法计算器进行扩展，我们为它添加以]]></description>
</item>
<item>
    <title>从0开始自制解释器——实现简单的加法计算器</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser02/</link>
    <pubDate>Tue, 07 Mar 2023 09:34:42 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser02/</guid>
    <description><![CDATA[为什么要学习编译器和解释器呢？文中的作者给出的答案有下面几个： 为了深入理解计算机是如何工作的：一个显而易见的道理就是，如果你不懂编译器和解释]]></description>
</item>
<item>
    <title>从0开始自制解释器——概述</title>
    <link>http://HaiLateBoy.github.io/posts/make-parser01/</link>
    <pubDate>Sat, 04 Mar 2023 10:26:43 &#43;0800</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/make-parser01/</guid>
    <description><![CDATA[作为一个程序员，自制自己的编译器一直是一个梦想。之前也曾为了这个梦想学习过类似龙书、虎书这种大部头的书，但是光看理论总有一些云里雾里的感觉。]]></description>
</item>
<item>
    <title>记一次内存泄露调试</title>
    <link>http://HaiLateBoy.github.io/posts/memory-leak-debug/</link>
    <pubDate>Sun, 10 Jan 2021 18:16:06 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/memory-leak-debug/</guid>
    <description><![CDATA[首先介绍一下相关背景。最近在测试一个程序时发现，在任务执行完成之后，从任务管理器上来看，内存并没有下降到理论值上。程序在启动完成之后会占用一]]></description>
</item>
<item>
    <title>算法与数据结构(七)：快速排序</title>
    <link>http://HaiLateBoy.github.io/posts/quick-sort/</link>
    <pubDate>Sat, 06 Apr 2019 12:29:04 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/quick-sort/</guid>
    <description><![CDATA[在上一篇中，回顾了一下针对选择排序的优化算法——堆排序。堆排序的时间复杂度为O(nlogn)，而快速排序的时间复杂度也是O(nlogn)。但]]></description>
</item>
<item>
    <title>算法与数据结构(六)：堆排序</title>
    <link>http://HaiLateBoy.github.io/posts/heap-sort/</link>
    <pubDate>Sun, 31 Mar 2019 12:32:29 &#43;0000</pubDate>
    <author>Masimaro</author>
    <guid>http://HaiLateBoy.github.io/posts/heap-sort/</guid>
    <description><![CDATA[上一次说到了3种基本的排序算法，三种基本的排序算法时间复杂度都是O(n^2)，虽然比较简单，但是效率相对较差，因此后续有许多相应的改进算法，]]></description>
</item>
</channel>
</rss>
